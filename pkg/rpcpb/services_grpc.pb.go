// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: pkg/rpcpb/services.proto

package rpcpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BuilderClient is the client API for Builder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BuilderClient interface {
	GetCommands(ctx context.Context, in *DescriptionsRequest, opts ...grpc.CallOption) (*DescriptionsReply, error)
	GetOptions(ctx context.Context, in *OptionsRequest, opts ...grpc.CallOption) (*OptionsReply, error)
	BuildAgent(ctx context.Context, in *BuildRequest, opts ...grpc.CallOption) (*BuildReply, error)
}

type builderClient struct {
	cc grpc.ClientConnInterface
}

func NewBuilderClient(cc grpc.ClientConnInterface) BuilderClient {
	return &builderClient{cc}
}

func (c *builderClient) GetCommands(ctx context.Context, in *DescriptionsRequest, opts ...grpc.CallOption) (*DescriptionsReply, error) {
	out := new(DescriptionsReply)
	err := c.cc.Invoke(ctx, "/rpcpb.Builder/GetCommands", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *builderClient) GetOptions(ctx context.Context, in *OptionsRequest, opts ...grpc.CallOption) (*OptionsReply, error) {
	out := new(OptionsReply)
	err := c.cc.Invoke(ctx, "/rpcpb.Builder/GetOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *builderClient) BuildAgent(ctx context.Context, in *BuildRequest, opts ...grpc.CallOption) (*BuildReply, error) {
	out := new(BuildReply)
	err := c.cc.Invoke(ctx, "/rpcpb.Builder/BuildAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BuilderServer is the server API for Builder service.
// All implementations must embed UnimplementedBuilderServer
// for forward compatibility
type BuilderServer interface {
	GetCommands(context.Context, *DescriptionsRequest) (*DescriptionsReply, error)
	GetOptions(context.Context, *OptionsRequest) (*OptionsReply, error)
	BuildAgent(context.Context, *BuildRequest) (*BuildReply, error)
	mustEmbedUnimplementedBuilderServer()
}

// UnimplementedBuilderServer must be embedded to have forward compatible implementations.
type UnimplementedBuilderServer struct {
}

func (UnimplementedBuilderServer) GetCommands(context.Context, *DescriptionsRequest) (*DescriptionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommands not implemented")
}
func (UnimplementedBuilderServer) GetOptions(context.Context, *OptionsRequest) (*OptionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOptions not implemented")
}
func (UnimplementedBuilderServer) BuildAgent(context.Context, *BuildRequest) (*BuildReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildAgent not implemented")
}
func (UnimplementedBuilderServer) mustEmbedUnimplementedBuilderServer() {}

// UnsafeBuilderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BuilderServer will
// result in compilation errors.
type UnsafeBuilderServer interface {
	mustEmbedUnimplementedBuilderServer()
}

func RegisterBuilderServer(s grpc.ServiceRegistrar, srv BuilderServer) {
	s.RegisterService(&Builder_ServiceDesc, srv)
}

func _Builder_GetCommands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuilderServer).GetCommands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.Builder/GetCommands",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuilderServer).GetCommands(ctx, req.(*DescriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Builder_GetOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuilderServer).GetOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.Builder/GetOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuilderServer).GetOptions(ctx, req.(*OptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Builder_BuildAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuilderServer).BuildAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.Builder/BuildAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuilderServer).BuildAgent(ctx, req.(*BuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Builder_ServiceDesc is the grpc.ServiceDesc for Builder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Builder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpcpb.Builder",
	HandlerType: (*BuilderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCommands",
			Handler:    _Builder_GetCommands_Handler,
		},
		{
			MethodName: "GetOptions",
			Handler:    _Builder_GetOptions_Handler,
		},
		{
			MethodName: "BuildAgent",
			Handler:    _Builder_BuildAgent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/rpcpb/services.proto",
}
