// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: rpcpb/services.proto

package rpcpb

import (
	context "context"
	builderpb "github.com/pygrum/monarch/pkg/protobuf/builderpb"
	clientpb "github.com/pygrum/monarch/pkg/protobuf/clientpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BuilderClient is the client API for Builder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BuilderClient interface {
	GetCommands(ctx context.Context, in *builderpb.DescriptionsRequest, opts ...grpc.CallOption) (*builderpb.DescriptionsReply, error)
	GetOptions(ctx context.Context, in *builderpb.OptionsRequest, opts ...grpc.CallOption) (*builderpb.OptionsReply, error)
	BuildAgent(ctx context.Context, in *builderpb.BuildRequest, opts ...grpc.CallOption) (*builderpb.BuildReply, error)
}

type builderClient struct {
	cc grpc.ClientConnInterface
}

func NewBuilderClient(cc grpc.ClientConnInterface) BuilderClient {
	return &builderClient{cc}
}

func (c *builderClient) GetCommands(ctx context.Context, in *builderpb.DescriptionsRequest, opts ...grpc.CallOption) (*builderpb.DescriptionsReply, error) {
	out := new(builderpb.DescriptionsReply)
	err := c.cc.Invoke(ctx, "/rpcpb.Builder/GetCommands", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *builderClient) GetOptions(ctx context.Context, in *builderpb.OptionsRequest, opts ...grpc.CallOption) (*builderpb.OptionsReply, error) {
	out := new(builderpb.OptionsReply)
	err := c.cc.Invoke(ctx, "/rpcpb.Builder/GetOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *builderClient) BuildAgent(ctx context.Context, in *builderpb.BuildRequest, opts ...grpc.CallOption) (*builderpb.BuildReply, error) {
	out := new(builderpb.BuildReply)
	err := c.cc.Invoke(ctx, "/rpcpb.Builder/BuildAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BuilderServer is the server API for Builder service.
// All implementations must embed UnimplementedBuilderServer
// for forward compatibility
type BuilderServer interface {
	GetCommands(context.Context, *builderpb.DescriptionsRequest) (*builderpb.DescriptionsReply, error)
	GetOptions(context.Context, *builderpb.OptionsRequest) (*builderpb.OptionsReply, error)
	BuildAgent(context.Context, *builderpb.BuildRequest) (*builderpb.BuildReply, error)
	mustEmbedUnimplementedBuilderServer()
}

// UnimplementedBuilderServer must be embedded to have forward compatible implementations.
type UnimplementedBuilderServer struct {
}

func (UnimplementedBuilderServer) GetCommands(context.Context, *builderpb.DescriptionsRequest) (*builderpb.DescriptionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommands not implemented")
}
func (UnimplementedBuilderServer) GetOptions(context.Context, *builderpb.OptionsRequest) (*builderpb.OptionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOptions not implemented")
}
func (UnimplementedBuilderServer) BuildAgent(context.Context, *builderpb.BuildRequest) (*builderpb.BuildReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildAgent not implemented")
}
func (UnimplementedBuilderServer) mustEmbedUnimplementedBuilderServer() {}

// UnsafeBuilderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BuilderServer will
// result in compilation errors.
type UnsafeBuilderServer interface {
	mustEmbedUnimplementedBuilderServer()
}

func RegisterBuilderServer(s grpc.ServiceRegistrar, srv BuilderServer) {
	s.RegisterService(&Builder_ServiceDesc, srv)
}

func _Builder_GetCommands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(builderpb.DescriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuilderServer).GetCommands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.Builder/GetCommands",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuilderServer).GetCommands(ctx, req.(*builderpb.DescriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Builder_GetOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(builderpb.OptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuilderServer).GetOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.Builder/GetOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuilderServer).GetOptions(ctx, req.(*builderpb.OptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Builder_BuildAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(builderpb.BuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuilderServer).BuildAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.Builder/BuildAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuilderServer).BuildAgent(ctx, req.(*builderpb.BuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Builder_ServiceDesc is the grpc.ServiceDesc for Builder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Builder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpcpb.Builder",
	HandlerType: (*BuilderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCommands",
			Handler:    _Builder_GetCommands_Handler,
		},
		{
			MethodName: "GetOptions",
			Handler:    _Builder_GetOptions_Handler,
		},
		{
			MethodName: "BuildAgent",
			Handler:    _Builder_BuildAgent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpcpb/services.proto",
}

// MonarchClient is the client API for Monarch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MonarchClient interface {
	Agents(ctx context.Context, in *clientpb.AgentRequest, opts ...grpc.CallOption) (*clientpb.Agents, error)
	NewAgent(ctx context.Context, in *clientpb.Agent, opts ...grpc.CallOption) (*clientpb.Empty, error)
	RmAgents(ctx context.Context, in *clientpb.AgentRequest, opts ...grpc.CallOption) (*clientpb.Empty, error)
	Builders(ctx context.Context, in *clientpb.BuilderRequest, opts ...grpc.CallOption) (*clientpb.Builders, error)
	Profiles(ctx context.Context, in *clientpb.ProfileRequest, opts ...grpc.CallOption) (*clientpb.Profiles, error)
	SaveProfile(ctx context.Context, in *clientpb.SaveProfileRequest, opts ...grpc.CallOption) (*clientpb.Empty, error)
	LoadProfile(ctx context.Context, in *clientpb.SaveProfileRequest, opts ...grpc.CallOption) (*clientpb.ProfileData, error)
	RmProfiles(ctx context.Context, in *clientpb.ProfileRequest, opts ...grpc.CallOption) (*clientpb.Empty, error)
	Options(ctx context.Context, in *builderpb.OptionsRequest, opts ...grpc.CallOption) (*builderpb.OptionsReply, error)
	Build(ctx context.Context, in *builderpb.BuildRequest, opts ...grpc.CallOption) (*builderpb.BuildReply, error)
	EndBuild(ctx context.Context, in *builderpb.BuildRequest, opts ...grpc.CallOption) (*clientpb.Empty, error)
	Install(ctx context.Context, in *clientpb.InstallRequest, opts ...grpc.CallOption) (Monarch_InstallClient, error)
	Uninstall(ctx context.Context, in *clientpb.UninstallRequest, opts ...grpc.CallOption) (Monarch_UninstallClient, error)
	HttpOpen(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*Notification, error)
	HttpClose(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*clientpb.Empty, error)
	HttpsOpen(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*Notification, error)
	HttpsClose(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*clientpb.Empty, error)
	Sessions(ctx context.Context, in *clientpb.SessionsRequest, opts ...grpc.CallOption) (*clientpb.Sessions, error)
	Commands(ctx context.Context, in *builderpb.DescriptionsRequest, opts ...grpc.CallOption) (*builderpb.DescriptionsReply, error)
	Send(ctx context.Context, in *clientpb.HTTPRequest, opts ...grpc.CallOption) (*clientpb.HTTPResponse, error)
	// Notify used for general notifications - likely run from a goroutine
	Notify(ctx context.Context, in *clientpb.NotifyRequest, opts ...grpc.CallOption) (Monarch_NotifyClient, error)
}

type monarchClient struct {
	cc grpc.ClientConnInterface
}

func NewMonarchClient(cc grpc.ClientConnInterface) MonarchClient {
	return &monarchClient{cc}
}

func (c *monarchClient) Agents(ctx context.Context, in *clientpb.AgentRequest, opts ...grpc.CallOption) (*clientpb.Agents, error) {
	out := new(clientpb.Agents)
	err := c.cc.Invoke(ctx, "/rpcpb.Monarch/Agents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monarchClient) NewAgent(ctx context.Context, in *clientpb.Agent, opts ...grpc.CallOption) (*clientpb.Empty, error) {
	out := new(clientpb.Empty)
	err := c.cc.Invoke(ctx, "/rpcpb.Monarch/NewAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monarchClient) RmAgents(ctx context.Context, in *clientpb.AgentRequest, opts ...grpc.CallOption) (*clientpb.Empty, error) {
	out := new(clientpb.Empty)
	err := c.cc.Invoke(ctx, "/rpcpb.Monarch/RmAgents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monarchClient) Builders(ctx context.Context, in *clientpb.BuilderRequest, opts ...grpc.CallOption) (*clientpb.Builders, error) {
	out := new(clientpb.Builders)
	err := c.cc.Invoke(ctx, "/rpcpb.Monarch/Builders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monarchClient) Profiles(ctx context.Context, in *clientpb.ProfileRequest, opts ...grpc.CallOption) (*clientpb.Profiles, error) {
	out := new(clientpb.Profiles)
	err := c.cc.Invoke(ctx, "/rpcpb.Monarch/Profiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monarchClient) SaveProfile(ctx context.Context, in *clientpb.SaveProfileRequest, opts ...grpc.CallOption) (*clientpb.Empty, error) {
	out := new(clientpb.Empty)
	err := c.cc.Invoke(ctx, "/rpcpb.Monarch/SaveProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monarchClient) LoadProfile(ctx context.Context, in *clientpb.SaveProfileRequest, opts ...grpc.CallOption) (*clientpb.ProfileData, error) {
	out := new(clientpb.ProfileData)
	err := c.cc.Invoke(ctx, "/rpcpb.Monarch/LoadProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monarchClient) RmProfiles(ctx context.Context, in *clientpb.ProfileRequest, opts ...grpc.CallOption) (*clientpb.Empty, error) {
	out := new(clientpb.Empty)
	err := c.cc.Invoke(ctx, "/rpcpb.Monarch/RmProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monarchClient) Options(ctx context.Context, in *builderpb.OptionsRequest, opts ...grpc.CallOption) (*builderpb.OptionsReply, error) {
	out := new(builderpb.OptionsReply)
	err := c.cc.Invoke(ctx, "/rpcpb.Monarch/Options", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monarchClient) Build(ctx context.Context, in *builderpb.BuildRequest, opts ...grpc.CallOption) (*builderpb.BuildReply, error) {
	out := new(builderpb.BuildReply)
	err := c.cc.Invoke(ctx, "/rpcpb.Monarch/Build", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monarchClient) EndBuild(ctx context.Context, in *builderpb.BuildRequest, opts ...grpc.CallOption) (*clientpb.Empty, error) {
	out := new(clientpb.Empty)
	err := c.cc.Invoke(ctx, "/rpcpb.Monarch/EndBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monarchClient) Install(ctx context.Context, in *clientpb.InstallRequest, opts ...grpc.CallOption) (Monarch_InstallClient, error) {
	stream, err := c.cc.NewStream(ctx, &Monarch_ServiceDesc.Streams[0], "/rpcpb.Monarch/Install", opts...)
	if err != nil {
		return nil, err
	}
	x := &monarchInstallClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Monarch_InstallClient interface {
	Recv() (*Notification, error)
	grpc.ClientStream
}

type monarchInstallClient struct {
	grpc.ClientStream
}

func (x *monarchInstallClient) Recv() (*Notification, error) {
	m := new(Notification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *monarchClient) Uninstall(ctx context.Context, in *clientpb.UninstallRequest, opts ...grpc.CallOption) (Monarch_UninstallClient, error) {
	stream, err := c.cc.NewStream(ctx, &Monarch_ServiceDesc.Streams[1], "/rpcpb.Monarch/Uninstall", opts...)
	if err != nil {
		return nil, err
	}
	x := &monarchUninstallClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Monarch_UninstallClient interface {
	Recv() (*Notification, error)
	grpc.ClientStream
}

type monarchUninstallClient struct {
	grpc.ClientStream
}

func (x *monarchUninstallClient) Recv() (*Notification, error) {
	m := new(Notification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *monarchClient) HttpOpen(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*Notification, error) {
	out := new(Notification)
	err := c.cc.Invoke(ctx, "/rpcpb.Monarch/HttpOpen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monarchClient) HttpClose(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*clientpb.Empty, error) {
	out := new(clientpb.Empty)
	err := c.cc.Invoke(ctx, "/rpcpb.Monarch/HttpClose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monarchClient) HttpsOpen(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*Notification, error) {
	out := new(Notification)
	err := c.cc.Invoke(ctx, "/rpcpb.Monarch/HttpsOpen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monarchClient) HttpsClose(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*clientpb.Empty, error) {
	out := new(clientpb.Empty)
	err := c.cc.Invoke(ctx, "/rpcpb.Monarch/HttpsClose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monarchClient) Sessions(ctx context.Context, in *clientpb.SessionsRequest, opts ...grpc.CallOption) (*clientpb.Sessions, error) {
	out := new(clientpb.Sessions)
	err := c.cc.Invoke(ctx, "/rpcpb.Monarch/Sessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monarchClient) Commands(ctx context.Context, in *builderpb.DescriptionsRequest, opts ...grpc.CallOption) (*builderpb.DescriptionsReply, error) {
	out := new(builderpb.DescriptionsReply)
	err := c.cc.Invoke(ctx, "/rpcpb.Monarch/Commands", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monarchClient) Send(ctx context.Context, in *clientpb.HTTPRequest, opts ...grpc.CallOption) (*clientpb.HTTPResponse, error) {
	out := new(clientpb.HTTPResponse)
	err := c.cc.Invoke(ctx, "/rpcpb.Monarch/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monarchClient) Notify(ctx context.Context, in *clientpb.NotifyRequest, opts ...grpc.CallOption) (Monarch_NotifyClient, error) {
	stream, err := c.cc.NewStream(ctx, &Monarch_ServiceDesc.Streams[2], "/rpcpb.Monarch/Notify", opts...)
	if err != nil {
		return nil, err
	}
	x := &monarchNotifyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Monarch_NotifyClient interface {
	Recv() (*Notification, error)
	grpc.ClientStream
}

type monarchNotifyClient struct {
	grpc.ClientStream
}

func (x *monarchNotifyClient) Recv() (*Notification, error) {
	m := new(Notification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MonarchServer is the server API for Monarch service.
// All implementations must embed UnimplementedMonarchServer
// for forward compatibility
type MonarchServer interface {
	Agents(context.Context, *clientpb.AgentRequest) (*clientpb.Agents, error)
	NewAgent(context.Context, *clientpb.Agent) (*clientpb.Empty, error)
	RmAgents(context.Context, *clientpb.AgentRequest) (*clientpb.Empty, error)
	Builders(context.Context, *clientpb.BuilderRequest) (*clientpb.Builders, error)
	Profiles(context.Context, *clientpb.ProfileRequest) (*clientpb.Profiles, error)
	SaveProfile(context.Context, *clientpb.SaveProfileRequest) (*clientpb.Empty, error)
	LoadProfile(context.Context, *clientpb.SaveProfileRequest) (*clientpb.ProfileData, error)
	RmProfiles(context.Context, *clientpb.ProfileRequest) (*clientpb.Empty, error)
	Options(context.Context, *builderpb.OptionsRequest) (*builderpb.OptionsReply, error)
	Build(context.Context, *builderpb.BuildRequest) (*builderpb.BuildReply, error)
	EndBuild(context.Context, *builderpb.BuildRequest) (*clientpb.Empty, error)
	Install(*clientpb.InstallRequest, Monarch_InstallServer) error
	Uninstall(*clientpb.UninstallRequest, Monarch_UninstallServer) error
	HttpOpen(context.Context, *clientpb.Empty) (*Notification, error)
	HttpClose(context.Context, *clientpb.Empty) (*clientpb.Empty, error)
	HttpsOpen(context.Context, *clientpb.Empty) (*Notification, error)
	HttpsClose(context.Context, *clientpb.Empty) (*clientpb.Empty, error)
	Sessions(context.Context, *clientpb.SessionsRequest) (*clientpb.Sessions, error)
	Commands(context.Context, *builderpb.DescriptionsRequest) (*builderpb.DescriptionsReply, error)
	Send(context.Context, *clientpb.HTTPRequest) (*clientpb.HTTPResponse, error)
	// Notify used for general notifications - likely run from a goroutine
	Notify(*clientpb.NotifyRequest, Monarch_NotifyServer) error
	mustEmbedUnimplementedMonarchServer()
}

// UnimplementedMonarchServer must be embedded to have forward compatible implementations.
type UnimplementedMonarchServer struct {
}

func (UnimplementedMonarchServer) Agents(context.Context, *clientpb.AgentRequest) (*clientpb.Agents, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Agents not implemented")
}
func (UnimplementedMonarchServer) NewAgent(context.Context, *clientpb.Agent) (*clientpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewAgent not implemented")
}
func (UnimplementedMonarchServer) RmAgents(context.Context, *clientpb.AgentRequest) (*clientpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RmAgents not implemented")
}
func (UnimplementedMonarchServer) Builders(context.Context, *clientpb.BuilderRequest) (*clientpb.Builders, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Builders not implemented")
}
func (UnimplementedMonarchServer) Profiles(context.Context, *clientpb.ProfileRequest) (*clientpb.Profiles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Profiles not implemented")
}
func (UnimplementedMonarchServer) SaveProfile(context.Context, *clientpb.SaveProfileRequest) (*clientpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveProfile not implemented")
}
func (UnimplementedMonarchServer) LoadProfile(context.Context, *clientpb.SaveProfileRequest) (*clientpb.ProfileData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadProfile not implemented")
}
func (UnimplementedMonarchServer) RmProfiles(context.Context, *clientpb.ProfileRequest) (*clientpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RmProfiles not implemented")
}
func (UnimplementedMonarchServer) Options(context.Context, *builderpb.OptionsRequest) (*builderpb.OptionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Options not implemented")
}
func (UnimplementedMonarchServer) Build(context.Context, *builderpb.BuildRequest) (*builderpb.BuildReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Build not implemented")
}
func (UnimplementedMonarchServer) EndBuild(context.Context, *builderpb.BuildRequest) (*clientpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndBuild not implemented")
}
func (UnimplementedMonarchServer) Install(*clientpb.InstallRequest, Monarch_InstallServer) error {
	return status.Errorf(codes.Unimplemented, "method Install not implemented")
}
func (UnimplementedMonarchServer) Uninstall(*clientpb.UninstallRequest, Monarch_UninstallServer) error {
	return status.Errorf(codes.Unimplemented, "method Uninstall not implemented")
}
func (UnimplementedMonarchServer) HttpOpen(context.Context, *clientpb.Empty) (*Notification, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HttpOpen not implemented")
}
func (UnimplementedMonarchServer) HttpClose(context.Context, *clientpb.Empty) (*clientpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HttpClose not implemented")
}
func (UnimplementedMonarchServer) HttpsOpen(context.Context, *clientpb.Empty) (*Notification, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HttpsOpen not implemented")
}
func (UnimplementedMonarchServer) HttpsClose(context.Context, *clientpb.Empty) (*clientpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HttpsClose not implemented")
}
func (UnimplementedMonarchServer) Sessions(context.Context, *clientpb.SessionsRequest) (*clientpb.Sessions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sessions not implemented")
}
func (UnimplementedMonarchServer) Commands(context.Context, *builderpb.DescriptionsRequest) (*builderpb.DescriptionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commands not implemented")
}
func (UnimplementedMonarchServer) Send(context.Context, *clientpb.HTTPRequest) (*clientpb.HTTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedMonarchServer) Notify(*clientpb.NotifyRequest, Monarch_NotifyServer) error {
	return status.Errorf(codes.Unimplemented, "method Notify not implemented")
}
func (UnimplementedMonarchServer) mustEmbedUnimplementedMonarchServer() {}

// UnsafeMonarchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MonarchServer will
// result in compilation errors.
type UnsafeMonarchServer interface {
	mustEmbedUnimplementedMonarchServer()
}

func RegisterMonarchServer(s grpc.ServiceRegistrar, srv MonarchServer) {
	s.RegisterService(&Monarch_ServiceDesc, srv)
}

func _Monarch_Agents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.AgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonarchServer).Agents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.Monarch/Agents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonarchServer).Agents(ctx, req.(*clientpb.AgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Monarch_NewAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Agent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonarchServer).NewAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.Monarch/NewAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonarchServer).NewAgent(ctx, req.(*clientpb.Agent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Monarch_RmAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.AgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonarchServer).RmAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.Monarch/RmAgents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonarchServer).RmAgents(ctx, req.(*clientpb.AgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Monarch_Builders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.BuilderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonarchServer).Builders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.Monarch/Builders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonarchServer).Builders(ctx, req.(*clientpb.BuilderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Monarch_Profiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.ProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonarchServer).Profiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.Monarch/Profiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonarchServer).Profiles(ctx, req.(*clientpb.ProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Monarch_SaveProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.SaveProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonarchServer).SaveProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.Monarch/SaveProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonarchServer).SaveProfile(ctx, req.(*clientpb.SaveProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Monarch_LoadProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.SaveProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonarchServer).LoadProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.Monarch/LoadProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonarchServer).LoadProfile(ctx, req.(*clientpb.SaveProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Monarch_RmProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.ProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonarchServer).RmProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.Monarch/RmProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonarchServer).RmProfiles(ctx, req.(*clientpb.ProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Monarch_Options_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(builderpb.OptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonarchServer).Options(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.Monarch/Options",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonarchServer).Options(ctx, req.(*builderpb.OptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Monarch_Build_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(builderpb.BuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonarchServer).Build(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.Monarch/Build",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonarchServer).Build(ctx, req.(*builderpb.BuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Monarch_EndBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(builderpb.BuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonarchServer).EndBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.Monarch/EndBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonarchServer).EndBuild(ctx, req.(*builderpb.BuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Monarch_Install_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(clientpb.InstallRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonarchServer).Install(m, &monarchInstallServer{stream})
}

type Monarch_InstallServer interface {
	Send(*Notification) error
	grpc.ServerStream
}

type monarchInstallServer struct {
	grpc.ServerStream
}

func (x *monarchInstallServer) Send(m *Notification) error {
	return x.ServerStream.SendMsg(m)
}

func _Monarch_Uninstall_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(clientpb.UninstallRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonarchServer).Uninstall(m, &monarchUninstallServer{stream})
}

type Monarch_UninstallServer interface {
	Send(*Notification) error
	grpc.ServerStream
}

type monarchUninstallServer struct {
	grpc.ServerStream
}

func (x *monarchUninstallServer) Send(m *Notification) error {
	return x.ServerStream.SendMsg(m)
}

func _Monarch_HttpOpen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonarchServer).HttpOpen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.Monarch/HttpOpen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonarchServer).HttpOpen(ctx, req.(*clientpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Monarch_HttpClose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonarchServer).HttpClose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.Monarch/HttpClose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonarchServer).HttpClose(ctx, req.(*clientpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Monarch_HttpsOpen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonarchServer).HttpsOpen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.Monarch/HttpsOpen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonarchServer).HttpsOpen(ctx, req.(*clientpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Monarch_HttpsClose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonarchServer).HttpsClose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.Monarch/HttpsClose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonarchServer).HttpsClose(ctx, req.(*clientpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Monarch_Sessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.SessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonarchServer).Sessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.Monarch/Sessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonarchServer).Sessions(ctx, req.(*clientpb.SessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Monarch_Commands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(builderpb.DescriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonarchServer).Commands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.Monarch/Commands",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonarchServer).Commands(ctx, req.(*builderpb.DescriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Monarch_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.HTTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonarchServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.Monarch/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonarchServer).Send(ctx, req.(*clientpb.HTTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Monarch_Notify_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(clientpb.NotifyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonarchServer).Notify(m, &monarchNotifyServer{stream})
}

type Monarch_NotifyServer interface {
	Send(*Notification) error
	grpc.ServerStream
}

type monarchNotifyServer struct {
	grpc.ServerStream
}

func (x *monarchNotifyServer) Send(m *Notification) error {
	return x.ServerStream.SendMsg(m)
}

// Monarch_ServiceDesc is the grpc.ServiceDesc for Monarch service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Monarch_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpcpb.Monarch",
	HandlerType: (*MonarchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Agents",
			Handler:    _Monarch_Agents_Handler,
		},
		{
			MethodName: "NewAgent",
			Handler:    _Monarch_NewAgent_Handler,
		},
		{
			MethodName: "RmAgents",
			Handler:    _Monarch_RmAgents_Handler,
		},
		{
			MethodName: "Builders",
			Handler:    _Monarch_Builders_Handler,
		},
		{
			MethodName: "Profiles",
			Handler:    _Monarch_Profiles_Handler,
		},
		{
			MethodName: "SaveProfile",
			Handler:    _Monarch_SaveProfile_Handler,
		},
		{
			MethodName: "LoadProfile",
			Handler:    _Monarch_LoadProfile_Handler,
		},
		{
			MethodName: "RmProfiles",
			Handler:    _Monarch_RmProfiles_Handler,
		},
		{
			MethodName: "Options",
			Handler:    _Monarch_Options_Handler,
		},
		{
			MethodName: "Build",
			Handler:    _Monarch_Build_Handler,
		},
		{
			MethodName: "EndBuild",
			Handler:    _Monarch_EndBuild_Handler,
		},
		{
			MethodName: "HttpOpen",
			Handler:    _Monarch_HttpOpen_Handler,
		},
		{
			MethodName: "HttpClose",
			Handler:    _Monarch_HttpClose_Handler,
		},
		{
			MethodName: "HttpsOpen",
			Handler:    _Monarch_HttpsOpen_Handler,
		},
		{
			MethodName: "HttpsClose",
			Handler:    _Monarch_HttpsClose_Handler,
		},
		{
			MethodName: "Sessions",
			Handler:    _Monarch_Sessions_Handler,
		},
		{
			MethodName: "Commands",
			Handler:    _Monarch_Commands_Handler,
		},
		{
			MethodName: "Send",
			Handler:    _Monarch_Send_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Install",
			Handler:       _Monarch_Install_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Uninstall",
			Handler:       _Monarch_Uninstall_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Notify",
			Handler:       _Monarch_Notify_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpcpb/services.proto",
}
