// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: rpcpb/services.proto

package rpcpb

import (
	context "context"
	builderpb "github.com/pygrum/monarch/pkg/protobuf/builderpb"
	clientpb "github.com/pygrum/monarch/pkg/protobuf/clientpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BuilderClient is the client API for Builder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BuilderClient interface {
	GetCommands(ctx context.Context, in *builderpb.DescriptionsRequest, opts ...grpc.CallOption) (*builderpb.DescriptionsReply, error)
	GetOptions(ctx context.Context, in *builderpb.OptionsRequest, opts ...grpc.CallOption) (*builderpb.OptionsReply, error)
	BuildAgent(ctx context.Context, in *builderpb.BuildRequest, opts ...grpc.CallOption) (*builderpb.BuildReply, error)
}

type builderClient struct {
	cc grpc.ClientConnInterface
}

func NewBuilderClient(cc grpc.ClientConnInterface) BuilderClient {
	return &builderClient{cc}
}

func (c *builderClient) GetCommands(ctx context.Context, in *builderpb.DescriptionsRequest, opts ...grpc.CallOption) (*builderpb.DescriptionsReply, error) {
	out := new(builderpb.DescriptionsReply)
	err := c.cc.Invoke(ctx, "/rpcpb.Builder/GetCommands", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *builderClient) GetOptions(ctx context.Context, in *builderpb.OptionsRequest, opts ...grpc.CallOption) (*builderpb.OptionsReply, error) {
	out := new(builderpb.OptionsReply)
	err := c.cc.Invoke(ctx, "/rpcpb.Builder/GetOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *builderClient) BuildAgent(ctx context.Context, in *builderpb.BuildRequest, opts ...grpc.CallOption) (*builderpb.BuildReply, error) {
	out := new(builderpb.BuildReply)
	err := c.cc.Invoke(ctx, "/rpcpb.Builder/BuildAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BuilderServer is the server API for Builder service.
// All implementations must embed UnimplementedBuilderServer
// for forward compatibility
type BuilderServer interface {
	GetCommands(context.Context, *builderpb.DescriptionsRequest) (*builderpb.DescriptionsReply, error)
	GetOptions(context.Context, *builderpb.OptionsRequest) (*builderpb.OptionsReply, error)
	BuildAgent(context.Context, *builderpb.BuildRequest) (*builderpb.BuildReply, error)
	mustEmbedUnimplementedBuilderServer()
}

// UnimplementedBuilderServer must be embedded to have forward compatible implementations.
type UnimplementedBuilderServer struct {
}

func (UnimplementedBuilderServer) GetCommands(context.Context, *builderpb.DescriptionsRequest) (*builderpb.DescriptionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommands not implemented")
}
func (UnimplementedBuilderServer) GetOptions(context.Context, *builderpb.OptionsRequest) (*builderpb.OptionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOptions not implemented")
}
func (UnimplementedBuilderServer) BuildAgent(context.Context, *builderpb.BuildRequest) (*builderpb.BuildReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildAgent not implemented")
}
func (UnimplementedBuilderServer) mustEmbedUnimplementedBuilderServer() {}

// UnsafeBuilderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BuilderServer will
// result in compilation errors.
type UnsafeBuilderServer interface {
	mustEmbedUnimplementedBuilderServer()
}

func RegisterBuilderServer(s grpc.ServiceRegistrar, srv BuilderServer) {
	s.RegisterService(&Builder_ServiceDesc, srv)
}

func _Builder_GetCommands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(builderpb.DescriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuilderServer).GetCommands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.Builder/GetCommands",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuilderServer).GetCommands(ctx, req.(*builderpb.DescriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Builder_GetOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(builderpb.OptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuilderServer).GetOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.Builder/GetOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuilderServer).GetOptions(ctx, req.(*builderpb.OptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Builder_BuildAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(builderpb.BuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuilderServer).BuildAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.Builder/BuildAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuilderServer).BuildAgent(ctx, req.(*builderpb.BuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Builder_ServiceDesc is the grpc.ServiceDesc for Builder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Builder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpcpb.Builder",
	HandlerType: (*BuilderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCommands",
			Handler:    _Builder_GetCommands_Handler,
		},
		{
			MethodName: "GetOptions",
			Handler:    _Builder_GetOptions_Handler,
		},
		{
			MethodName: "BuildAgent",
			Handler:    _Builder_BuildAgent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpcpb/services.proto",
}

// ClientClient is the client API for Client service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientClient interface {
	Agents(ctx context.Context, in *clientpb.AgentRequest, opts ...grpc.CallOption) (*clientpb.Agents, error)
	RmAgents(ctx context.Context, in *clientpb.AgentRequest, opts ...grpc.CallOption) (*Notification, error)
	Builders(ctx context.Context, in *clientpb.BuilderRequest, opts ...grpc.CallOption) (*clientpb.Builders, error)
	Profiles(ctx context.Context, in *clientpb.ProfileRequest, opts ...grpc.CallOption) (*clientpb.Profiles, error)
	Commands(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*builderpb.DescriptionsReply, error)
	Options(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*builderpb.OptionsReply, error)
	Build(ctx context.Context, in *builderpb.BuildRequest, opts ...grpc.CallOption) (*builderpb.BuildReply, error)
	Install(ctx context.Context, in *clientpb.InstallRequest, opts ...grpc.CallOption) (Client_InstallClient, error)
	Uninstall(ctx context.Context, in *clientpb.BuilderRequest, opts ...grpc.CallOption) (*Notification, error)
	HttpOpen(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*Notification, error)
	HttpClose(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*Notification, error)
	HttpsOpen(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*Notification, error)
	HttpsClose(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*Notification, error)
	Sessions(ctx context.Context, in *clientpb.SessionsRequest, opts ...grpc.CallOption) (*clientpb.Sessions, error)
	// Notify used for general notifications - likely run from a goroutine
	Notify(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (Client_NotifyClient, error)
	Send(ctx context.Context, in *clientpb.HTTPRequest, opts ...grpc.CallOption) (*clientpb.HTTPResponse, error)
}

type clientClient struct {
	cc grpc.ClientConnInterface
}

func NewClientClient(cc grpc.ClientConnInterface) ClientClient {
	return &clientClient{cc}
}

func (c *clientClient) Agents(ctx context.Context, in *clientpb.AgentRequest, opts ...grpc.CallOption) (*clientpb.Agents, error) {
	out := new(clientpb.Agents)
	err := c.cc.Invoke(ctx, "/rpcpb.Client/Agents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientClient) RmAgents(ctx context.Context, in *clientpb.AgentRequest, opts ...grpc.CallOption) (*Notification, error) {
	out := new(Notification)
	err := c.cc.Invoke(ctx, "/rpcpb.Client/RmAgents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientClient) Builders(ctx context.Context, in *clientpb.BuilderRequest, opts ...grpc.CallOption) (*clientpb.Builders, error) {
	out := new(clientpb.Builders)
	err := c.cc.Invoke(ctx, "/rpcpb.Client/Builders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientClient) Profiles(ctx context.Context, in *clientpb.ProfileRequest, opts ...grpc.CallOption) (*clientpb.Profiles, error) {
	out := new(clientpb.Profiles)
	err := c.cc.Invoke(ctx, "/rpcpb.Client/Profiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientClient) Commands(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*builderpb.DescriptionsReply, error) {
	out := new(builderpb.DescriptionsReply)
	err := c.cc.Invoke(ctx, "/rpcpb.Client/Commands", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientClient) Options(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*builderpb.OptionsReply, error) {
	out := new(builderpb.OptionsReply)
	err := c.cc.Invoke(ctx, "/rpcpb.Client/Options", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientClient) Build(ctx context.Context, in *builderpb.BuildRequest, opts ...grpc.CallOption) (*builderpb.BuildReply, error) {
	out := new(builderpb.BuildReply)
	err := c.cc.Invoke(ctx, "/rpcpb.Client/Build", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientClient) Install(ctx context.Context, in *clientpb.InstallRequest, opts ...grpc.CallOption) (Client_InstallClient, error) {
	stream, err := c.cc.NewStream(ctx, &Client_ServiceDesc.Streams[0], "/rpcpb.Client/Install", opts...)
	if err != nil {
		return nil, err
	}
	x := &clientInstallClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Client_InstallClient interface {
	Recv() (*Notification, error)
	grpc.ClientStream
}

type clientInstallClient struct {
	grpc.ClientStream
}

func (x *clientInstallClient) Recv() (*Notification, error) {
	m := new(Notification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clientClient) Uninstall(ctx context.Context, in *clientpb.BuilderRequest, opts ...grpc.CallOption) (*Notification, error) {
	out := new(Notification)
	err := c.cc.Invoke(ctx, "/rpcpb.Client/Uninstall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientClient) HttpOpen(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*Notification, error) {
	out := new(Notification)
	err := c.cc.Invoke(ctx, "/rpcpb.Client/HttpOpen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientClient) HttpClose(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*Notification, error) {
	out := new(Notification)
	err := c.cc.Invoke(ctx, "/rpcpb.Client/HttpClose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientClient) HttpsOpen(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*Notification, error) {
	out := new(Notification)
	err := c.cc.Invoke(ctx, "/rpcpb.Client/HttpsOpen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientClient) HttpsClose(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (*Notification, error) {
	out := new(Notification)
	err := c.cc.Invoke(ctx, "/rpcpb.Client/HttpsClose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientClient) Sessions(ctx context.Context, in *clientpb.SessionsRequest, opts ...grpc.CallOption) (*clientpb.Sessions, error) {
	out := new(clientpb.Sessions)
	err := c.cc.Invoke(ctx, "/rpcpb.Client/Sessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientClient) Notify(ctx context.Context, in *clientpb.Empty, opts ...grpc.CallOption) (Client_NotifyClient, error) {
	stream, err := c.cc.NewStream(ctx, &Client_ServiceDesc.Streams[1], "/rpcpb.Client/Notify", opts...)
	if err != nil {
		return nil, err
	}
	x := &clientNotifyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Client_NotifyClient interface {
	Recv() (*Notification, error)
	grpc.ClientStream
}

type clientNotifyClient struct {
	grpc.ClientStream
}

func (x *clientNotifyClient) Recv() (*Notification, error) {
	m := new(Notification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clientClient) Send(ctx context.Context, in *clientpb.HTTPRequest, opts ...grpc.CallOption) (*clientpb.HTTPResponse, error) {
	out := new(clientpb.HTTPResponse)
	err := c.cc.Invoke(ctx, "/rpcpb.Client/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientServer is the server API for Client service.
// All implementations must embed UnimplementedClientServer
// for forward compatibility
type ClientServer interface {
	Agents(context.Context, *clientpb.AgentRequest) (*clientpb.Agents, error)
	RmAgents(context.Context, *clientpb.AgentRequest) (*Notification, error)
	Builders(context.Context, *clientpb.BuilderRequest) (*clientpb.Builders, error)
	Profiles(context.Context, *clientpb.ProfileRequest) (*clientpb.Profiles, error)
	Commands(context.Context, *clientpb.Empty) (*builderpb.DescriptionsReply, error)
	Options(context.Context, *clientpb.Empty) (*builderpb.OptionsReply, error)
	Build(context.Context, *builderpb.BuildRequest) (*builderpb.BuildReply, error)
	Install(*clientpb.InstallRequest, Client_InstallServer) error
	Uninstall(context.Context, *clientpb.BuilderRequest) (*Notification, error)
	HttpOpen(context.Context, *clientpb.Empty) (*Notification, error)
	HttpClose(context.Context, *clientpb.Empty) (*Notification, error)
	HttpsOpen(context.Context, *clientpb.Empty) (*Notification, error)
	HttpsClose(context.Context, *clientpb.Empty) (*Notification, error)
	Sessions(context.Context, *clientpb.SessionsRequest) (*clientpb.Sessions, error)
	// Notify used for general notifications - likely run from a goroutine
	Notify(*clientpb.Empty, Client_NotifyServer) error
	Send(context.Context, *clientpb.HTTPRequest) (*clientpb.HTTPResponse, error)
	mustEmbedUnimplementedClientServer()
}

// UnimplementedClientServer must be embedded to have forward compatible implementations.
type UnimplementedClientServer struct {
}

func (UnimplementedClientServer) Agents(context.Context, *clientpb.AgentRequest) (*clientpb.Agents, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Agents not implemented")
}
func (UnimplementedClientServer) RmAgents(context.Context, *clientpb.AgentRequest) (*Notification, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RmAgents not implemented")
}
func (UnimplementedClientServer) Builders(context.Context, *clientpb.BuilderRequest) (*clientpb.Builders, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Builders not implemented")
}
func (UnimplementedClientServer) Profiles(context.Context, *clientpb.ProfileRequest) (*clientpb.Profiles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Profiles not implemented")
}
func (UnimplementedClientServer) Commands(context.Context, *clientpb.Empty) (*builderpb.DescriptionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commands not implemented")
}
func (UnimplementedClientServer) Options(context.Context, *clientpb.Empty) (*builderpb.OptionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Options not implemented")
}
func (UnimplementedClientServer) Build(context.Context, *builderpb.BuildRequest) (*builderpb.BuildReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Build not implemented")
}
func (UnimplementedClientServer) Install(*clientpb.InstallRequest, Client_InstallServer) error {
	return status.Errorf(codes.Unimplemented, "method Install not implemented")
}
func (UnimplementedClientServer) Uninstall(context.Context, *clientpb.BuilderRequest) (*Notification, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Uninstall not implemented")
}
func (UnimplementedClientServer) HttpOpen(context.Context, *clientpb.Empty) (*Notification, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HttpOpen not implemented")
}
func (UnimplementedClientServer) HttpClose(context.Context, *clientpb.Empty) (*Notification, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HttpClose not implemented")
}
func (UnimplementedClientServer) HttpsOpen(context.Context, *clientpb.Empty) (*Notification, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HttpsOpen not implemented")
}
func (UnimplementedClientServer) HttpsClose(context.Context, *clientpb.Empty) (*Notification, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HttpsClose not implemented")
}
func (UnimplementedClientServer) Sessions(context.Context, *clientpb.SessionsRequest) (*clientpb.Sessions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sessions not implemented")
}
func (UnimplementedClientServer) Notify(*clientpb.Empty, Client_NotifyServer) error {
	return status.Errorf(codes.Unimplemented, "method Notify not implemented")
}
func (UnimplementedClientServer) Send(context.Context, *clientpb.HTTPRequest) (*clientpb.HTTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedClientServer) mustEmbedUnimplementedClientServer() {}

// UnsafeClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientServer will
// result in compilation errors.
type UnsafeClientServer interface {
	mustEmbedUnimplementedClientServer()
}

func RegisterClientServer(s grpc.ServiceRegistrar, srv ClientServer) {
	s.RegisterService(&Client_ServiceDesc, srv)
}

func _Client_Agents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.AgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).Agents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.Client/Agents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).Agents(ctx, req.(*clientpb.AgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Client_RmAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.AgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).RmAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.Client/RmAgents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).RmAgents(ctx, req.(*clientpb.AgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Client_Builders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.BuilderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).Builders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.Client/Builders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).Builders(ctx, req.(*clientpb.BuilderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Client_Profiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.ProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).Profiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.Client/Profiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).Profiles(ctx, req.(*clientpb.ProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Client_Commands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).Commands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.Client/Commands",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).Commands(ctx, req.(*clientpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Client_Options_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).Options(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.Client/Options",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).Options(ctx, req.(*clientpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Client_Build_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(builderpb.BuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).Build(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.Client/Build",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).Build(ctx, req.(*builderpb.BuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Client_Install_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(clientpb.InstallRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClientServer).Install(m, &clientInstallServer{stream})
}

type Client_InstallServer interface {
	Send(*Notification) error
	grpc.ServerStream
}

type clientInstallServer struct {
	grpc.ServerStream
}

func (x *clientInstallServer) Send(m *Notification) error {
	return x.ServerStream.SendMsg(m)
}

func _Client_Uninstall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.BuilderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).Uninstall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.Client/Uninstall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).Uninstall(ctx, req.(*clientpb.BuilderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Client_HttpOpen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).HttpOpen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.Client/HttpOpen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).HttpOpen(ctx, req.(*clientpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Client_HttpClose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).HttpClose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.Client/HttpClose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).HttpClose(ctx, req.(*clientpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Client_HttpsOpen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).HttpsOpen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.Client/HttpsOpen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).HttpsOpen(ctx, req.(*clientpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Client_HttpsClose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).HttpsClose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.Client/HttpsClose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).HttpsClose(ctx, req.(*clientpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Client_Sessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.SessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).Sessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.Client/Sessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).Sessions(ctx, req.(*clientpb.SessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Client_Notify_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(clientpb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClientServer).Notify(m, &clientNotifyServer{stream})
}

type Client_NotifyServer interface {
	Send(*Notification) error
	grpc.ServerStream
}

type clientNotifyServer struct {
	grpc.ServerStream
}

func (x *clientNotifyServer) Send(m *Notification) error {
	return x.ServerStream.SendMsg(m)
}

func _Client_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.HTTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.Client/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).Send(ctx, req.(*clientpb.HTTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Client_ServiceDesc is the grpc.ServiceDesc for Client service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Client_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpcpb.Client",
	HandlerType: (*ClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Agents",
			Handler:    _Client_Agents_Handler,
		},
		{
			MethodName: "RmAgents",
			Handler:    _Client_RmAgents_Handler,
		},
		{
			MethodName: "Builders",
			Handler:    _Client_Builders_Handler,
		},
		{
			MethodName: "Profiles",
			Handler:    _Client_Profiles_Handler,
		},
		{
			MethodName: "Commands",
			Handler:    _Client_Commands_Handler,
		},
		{
			MethodName: "Options",
			Handler:    _Client_Options_Handler,
		},
		{
			MethodName: "Build",
			Handler:    _Client_Build_Handler,
		},
		{
			MethodName: "Uninstall",
			Handler:    _Client_Uninstall_Handler,
		},
		{
			MethodName: "HttpOpen",
			Handler:    _Client_HttpOpen_Handler,
		},
		{
			MethodName: "HttpClose",
			Handler:    _Client_HttpClose_Handler,
		},
		{
			MethodName: "HttpsOpen",
			Handler:    _Client_HttpsOpen_Handler,
		},
		{
			MethodName: "HttpsClose",
			Handler:    _Client_HttpsClose_Handler,
		},
		{
			MethodName: "Sessions",
			Handler:    _Client_Sessions_Handler,
		},
		{
			MethodName: "Send",
			Handler:    _Client_Send_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Install",
			Handler:       _Client_Install_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Notify",
			Handler:       _Client_Notify_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpcpb/services.proto",
}
